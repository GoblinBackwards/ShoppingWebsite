@using ShoppingWebsiteMvc.Models.ViewModels
@model CartViewModel

@{
    ViewData["Title"] = $"My Cart - {Model.Items.Length}";
}

<table class="table">
    <thead>
        <tr>
            <td>@(Html.DisplayNameFor(a => a.Items.First().Item.Name))</td>
            <td>@(Html.DisplayNameFor(a => a.Items.First().Quantity))</td>
        </tr>
    </thead>
    <tbody>
        @foreach (CartItem cartItem in Model.Items)
        {
            <tr id="@cartItem.ItemId">
                <td><a asp-controller="StoreItems" asp-action="Details" asp-route-id="@cartItem.Item.Id">@cartItem.Item.Name</a></td>
                <td>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" onclick="changeQuantity(@cartItem.ItemId, 1)"> <i class="fa-solid fa-plus"></i> </button>
                        <span id="@($"{cartItem.ItemId}-quantity")" class="btn btn-dark disabled">@cartItem.Quantity</span>
                        @if (cartItem.Quantity > 1)
                        {
                            <button id="@($"{cartItem.ItemId}-minus")" class="btn btn-outline-secondary" onclick="changeQuantity(@cartItem.ItemId, -1)"><i class="fa-solid fa-minus"></i></button>
                        }
                        else
                        {
                            <button id="@($"{cartItem.ItemId}-minus")" class="btn btn-outline-secondary disabled"><i class="fa-solid fa-minus"></i></button>
                        }
                        
                    </div>
                </td>
                <td><button onclick="removeFromCart(@cartItem.ItemId)" class="btn btn-danger">Remove</button></td>
            </tr>
        }
    </tbody>
</table>

@section scripts {
    <script>
        async function removeFromCart(id) {
            try {
                const res = await fetch(`/cart/delete/${id}`, {
                    method: 'POST'
                });
                if (res.ok) {
                    $('tr').$('#'+id).remove();
                } else {
                    throw new Error(`Response: ${res.status}`);
                }
            } catch (error) {
                console.error(error);
            }
        }

        async function changeQuantity(id, delta) {
            try {
                const res = await fetch(`/cart/changequantity/${id}?delta=${delta}`, {
                    method: 'POST'
                });
                if (res.ok) {
                    const data = await res.json();
                    updateQuantityDisplay(id, data);
                } else {
                    throw new Error(`Response: ${res.status}`);
                }
            } catch (error) {
                console.error(error);
            }
        }

        function updateQuantityDisplay(id, newValue) {
            const btnMinus = $(`#${id}-minus`);
            const spanQuantity = $(`#${id}-quantity`);
            const currentValue = spanQuantity.text();

            if (currentValue != 1 && newValue == 1) {
                btnMinus.addClass('disabled');
                btnMinus.unbind('click');
            } else if (currentValue == 1 && newValue != 1) {
                btnMinus.removeClass('disabled');
                btnMinus.unbind('click');
                btnMinus.click(function() { changeQuantity(id, -1) });
            }
            
            spanQuantity.text(newValue);
        }
    </script>
}
